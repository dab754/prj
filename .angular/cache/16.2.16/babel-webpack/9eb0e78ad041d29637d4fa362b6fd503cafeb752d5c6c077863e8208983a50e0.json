{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoanService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8081/loans';\n  }\n  getAllLoans() {\n    return this.http.get(this.apiUrl);\n  }\n  getLoanById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  createLoan(loan) {\n    return this.http.post(this.apiUrl, loan);\n  }\n  updateLoan(id, loan) {\n    return this.http.put(`${this.apiUrl}/${id}`, loan);\n  }\n  deleteLoan(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  getLoanHistory(freelancerId, status, startDate) {\n    let params = new HttpParams().set('freelancerId', freelancerId.toString());\n    if (status) {\n      params = params.set('status', status);\n    }\n    if (startDate) {\n      params = params.set('startDate', startDate);\n    }\n    return this.http.get(`${this.apiUrl}/history`, {\n      params\n    });\n  }\n  checkRepaymentData(id) {\n    return this.http.get(`${this.apiUrl}/${id}/repayment-data`);\n  }\n  makeRepayment(id, freelancerId, amount) {\n    const params = new HttpParams().set('amount', amount.toString()).set('freelancerId', freelancerId.toString());\n    return this.http.post(`${this.apiUrl}/${id}/repay`, null, {\n      params\n    });\n  }\n  simulateLoan(loanAmount, monthlyIncome, repaymentRatio = 0.3) {\n    const params = new HttpParams().set('loanAmount', loanAmount.toString()).set('monthlyIncome', monthlyIncome.toString()).set('repaymentRatio', repaymentRatio.toString());\n    return this.http.get(`${this.apiUrl}/simulate`, {\n      params\n    });\n  }\n  getRecommendedLoan(income) {\n    const params = new HttpParams().set('income', income.toString());\n    return this.http.get(`${this.apiUrl}/recommend`, {\n      params\n    });\n  }\n  applyForLoan(income, requestedAmount) {\n    const params = new HttpParams().set('income', income.toString()).set('requestedAmount', requestedAmount.toString());\n    return this.http.post(`${this.apiUrl}/apply`, null, {\n      params\n    });\n  }\n  static {\n    this.ɵfac = function LoanService_Factory(t) {\n      return new (t || LoanService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoanService,\n      factory: LoanService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","LoanService","constructor","http","apiUrl","getAllLoans","get","getLoanById","id","createLoan","loan","post","updateLoan","put","deleteLoan","delete","getLoanHistory","freelancerId","status","startDate","params","set","toString","checkRepaymentData","makeRepayment","amount","simulateLoan","loanAmount","monthlyIncome","repaymentRatio","getRecommendedLoan","income","applyForLoan","requestedAmount","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["G:\\Users\\DhiaEJ\\Desktop\\ValidPointedArchitects\\src\\app\\services\\loan.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Loan } from '../models/loan.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoanService {\n  private apiUrl = 'http://localhost:8081/loans';\n\n  constructor(private http: HttpClient) { }\n\n  getAllLoans(): Observable<Loan[]> {\n    return this.http.get<Loan[]>(this.apiUrl);\n  }\n\n  getLoanById(id: number): Observable<Loan> {\n    return this.http.get<Loan>(`${this.apiUrl}/${id}`);\n  }\n\n  createLoan(loan: Loan): Observable<Loan> {\n    return this.http.post<Loan>(this.apiUrl, loan);\n  }\n\n  updateLoan(id: number, loan: Loan): Observable<Loan> {\n    return this.http.put<Loan>(`${this.apiUrl}/${id}`, loan);\n  }\n\n  deleteLoan(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n\n  getLoanHistory(freelancerId: number, status?: string, startDate?: string): Observable<Loan[]> {\n    let params = new HttpParams().set('freelancerId', freelancerId.toString());\n    if (status) {\n      params = params.set('status', status);\n    }\n    if (startDate) {\n      params = params.set('startDate', startDate);\n    }\n    return this.http.get<Loan[]>(`${this.apiUrl}/history`, { params });\n  }\n\n  checkRepaymentData(id: number): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/${id}/repayment-data`);\n  }\n\n  makeRepayment(id: number, freelancerId: number, amount: number): Observable<any> {\n    const params = new HttpParams()\n      .set('amount', amount.toString())\n      .set('freelancerId', freelancerId.toString());\n    return this.http.post<any>(`${this.apiUrl}/${id}/repay`, null, { params });\n  }\n\n  simulateLoan(loanAmount: number, monthlyIncome: number, repaymentRatio: number = 0.3): Observable<any> {\n    const params = new HttpParams()\n      .set('loanAmount', loanAmount.toString())\n      .set('monthlyIncome', monthlyIncome.toString())\n      .set('repaymentRatio', repaymentRatio.toString());\n    return this.http.get<any>(`${this.apiUrl}/simulate`, { params });\n  }\n\n  getRecommendedLoan(income: number): Observable<any> {\n    const params = new HttpParams().set('income', income.toString());\n    return this.http.get<any>(`${this.apiUrl}/recommend`, { params });\n  }\n\n  applyForLoan(income: number, requestedAmount: number): Observable<string> {\n    const params = new HttpParams()\n      .set('income', income.toString())\n      .set('requestedAmount', requestedAmount.toString());\n    return this.http.post<string>(`${this.apiUrl}/apply`, null, { params });\n  }\n}\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAO7D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,6BAA6B;EAEN;EAExCC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,MAAM,CAAC;EAC3C;EAEAG,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAO,GAAG,IAAI,CAACF,MAAM,IAAII,EAAE,EAAE,CAAC;EACpD;EAEAC,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAO,IAAI,CAACP,MAAM,EAAEM,IAAI,CAAC;EAChD;EAEAE,UAAUA,CAACJ,EAAU,EAAEE,IAAU;IAC/B,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAO,GAAG,IAAI,CAACT,MAAM,IAAII,EAAE,EAAE,EAAEE,IAAI,CAAC;EAC1D;EAEAI,UAAUA,CAACN,EAAU;IACnB,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAO,GAAG,IAAI,CAACX,MAAM,IAAII,EAAE,EAAE,CAAC;EACvD;EAEAQ,cAAcA,CAACC,YAAoB,EAAEC,MAAe,EAAEC,SAAkB;IACtE,IAAIC,MAAM,GAAG,IAAIpB,UAAU,EAAE,CAACqB,GAAG,CAAC,cAAc,EAAEJ,YAAY,CAACK,QAAQ,EAAE,CAAC;IAC1E,IAAIJ,MAAM,EAAE;MACVE,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC;;IAEvC,IAAIC,SAAS,EAAE;MACbC,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,WAAW,EAAEF,SAAS,CAAC;;IAE7C,OAAO,IAAI,CAAChB,IAAI,CAACG,GAAG,CAAS,GAAG,IAAI,CAACF,MAAM,UAAU,EAAE;MAAEgB;IAAM,CAAE,CAAC;EACpE;EAEAG,kBAAkBA,CAACf,EAAU;IAC3B,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,IAAII,EAAE,iBAAiB,CAAC;EAClE;EAEAgB,aAAaA,CAAChB,EAAU,EAAES,YAAoB,EAAEQ,MAAc;IAC5D,MAAML,MAAM,GAAG,IAAIpB,UAAU,EAAE,CAC5BqB,GAAG,CAAC,QAAQ,EAAEI,MAAM,CAACH,QAAQ,EAAE,CAAC,CAChCD,GAAG,CAAC,cAAc,EAAEJ,YAAY,CAACK,QAAQ,EAAE,CAAC;IAC/C,OAAO,IAAI,CAACnB,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACP,MAAM,IAAII,EAAE,QAAQ,EAAE,IAAI,EAAE;MAAEY;IAAM,CAAE,CAAC;EAC5E;EAEAM,YAAYA,CAACC,UAAkB,EAAEC,aAAqB,EAAEC,cAAA,GAAyB,GAAG;IAClF,MAAMT,MAAM,GAAG,IAAIpB,UAAU,EAAE,CAC5BqB,GAAG,CAAC,YAAY,EAAEM,UAAU,CAACL,QAAQ,EAAE,CAAC,CACxCD,GAAG,CAAC,eAAe,EAAEO,aAAa,CAACN,QAAQ,EAAE,CAAC,CAC9CD,GAAG,CAAC,gBAAgB,EAAEQ,cAAc,CAACP,QAAQ,EAAE,CAAC;IACnD,OAAO,IAAI,CAACnB,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,WAAW,EAAE;MAAEgB;IAAM,CAAE,CAAC;EAClE;EAEAU,kBAAkBA,CAACC,MAAc;IAC/B,MAAMX,MAAM,GAAG,IAAIpB,UAAU,EAAE,CAACqB,GAAG,CAAC,QAAQ,EAAEU,MAAM,CAACT,QAAQ,EAAE,CAAC;IAChE,OAAO,IAAI,CAACnB,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,YAAY,EAAE;MAAEgB;IAAM,CAAE,CAAC;EACnE;EAEAY,YAAYA,CAACD,MAAc,EAAEE,eAAuB;IAClD,MAAMb,MAAM,GAAG,IAAIpB,UAAU,EAAE,CAC5BqB,GAAG,CAAC,QAAQ,EAAEU,MAAM,CAACT,QAAQ,EAAE,CAAC,CAChCD,GAAG,CAAC,iBAAiB,EAAEY,eAAe,CAACX,QAAQ,EAAE,CAAC;IACrD,OAAO,IAAI,CAACnB,IAAI,CAACQ,IAAI,CAAS,GAAG,IAAI,CAACP,MAAM,QAAQ,EAAE,IAAI,EAAE;MAAEgB;IAAM,CAAE,CAAC;EACzE;;;uBAjEWnB,WAAW,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXpC,WAAW;MAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}